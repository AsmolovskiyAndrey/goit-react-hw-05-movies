{"version":3,"file":"static/js/278.a3461cc2.chunk.js","mappings":"sMAuEA,UAnEe,WACb,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAkCF,EAAAA,EAAAA,UAAS,IAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WAAO,IAAD,EACRC,EAAM,UAAGL,EAAaM,IAAI,gBAApB,QAAgC,GAE7B,KAAXD,QAA4BE,IAAXF,IACnBG,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcd,EAAac,EAAKC,QAAhC,IACLC,OAAM,SAAAC,GAAK,OAAIA,CAAJ,GAEjB,GAAE,CAACb,IAEJ,IAcMc,EAAY,SAAAC,GAChB,IAAMC,EAAmB,KAATD,EAAA,gBAAuBA,GAAS,CAAC,EACjDd,EAAgBe,EACjB,EAED,OACE,6BACE,kBAAMC,SArBW,SAAAC,GACnBA,EAAIC,iBACJL,EAAUjB,GACVC,EAAa,KAEbU,EAAAA,EAAAA,IAAkBX,GACfY,MAAK,gBAAGC,EAAH,EAAGA,KAAH,OAAcd,EAAac,EAAKC,QAAhC,IACLC,OAAM,SAAAC,GAAK,OAAIA,CAAJ,GACf,EAaG,WACE,kBAAOO,QAAQ,YAAf,UACE,kBACEC,KAAK,OACLN,KAAK,YACLO,SAhBY,SAAAJ,GACpBpB,EAAaoB,EAAIK,OAAOC,MACzB,EAeSA,MAAO3B,OAGX,mBAAQwB,KAAK,SAAb,uBAEoB,IAArB1B,EAAU8B,QACT,wBACG9B,EAAU+B,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACpB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKF,GAAMG,MAAO,CAAEC,KAAM7B,GAAlC,SACG0B,KAFID,EAMZ,OAGH,8DAIP,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { fetchSearchedFilm } from 'components/FetchApi';\nimport { useEffect, useState } from 'react';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\n\nconst Movies = () => {\n  const [filmsName, setFilmsName] = useState([]);\n  const [valueForm, setValueForm] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const search = searchParams.get('query') ?? '';\n\n    if (search !== '' || search === undefined) {\n      fetchSearchedFilm(search)\n        .then(({ data }) => setFilmsName(data.results))\n        .catch(error => error);\n    }\n  }, [searchParams]);\n\n  const onSubmitForm = evt => {\n    evt.preventDefault();\n    updateURL(valueForm);\n    setValueForm('');\n\n    fetchSearchedFilm(valueForm)\n      .then(({ data }) => setFilmsName(data.results))\n      .catch(error => error);\n  };\n\n  const onInputChange = evt => {\n    setValueForm(evt.target.value);\n  };\n\n  const updateURL = name => {\n    const nextURL = name !== '' ? `query=${name}` : {};\n    setSearchParams(nextURL);\n  };\n\n  return (\n    <main>\n      <form onSubmit={onSubmitForm}>\n        <label htmlFor=\"film=name\">\n          <input\n            type=\"text\"\n            name=\"film-name\"\n            onChange={onInputChange}\n            value={valueForm}\n          />\n        </label>\n        <button type=\"submit\">Search</button>\n      </form>\n      {filmsName.length !== 0 ? (\n        <ul>\n          {filmsName.map(({ id, title }) => {\n            return (\n              <li key={id}>\n                <Link to={`${id}`} state={{ from: location }}>\n                  {title}\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p>Please input something to search</p>\n      )}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["useState","filmsName","setFilmsName","valueForm","setValueForm","useSearchParams","searchParams","setSearchParams","location","useLocation","useEffect","search","get","undefined","fetchSearchedFilm","then","data","results","catch","error","updateURL","name","nextURL","onSubmit","evt","preventDefault","htmlFor","type","onChange","target","value","length","map","id","title","to","state","from"],"sourceRoot":""}